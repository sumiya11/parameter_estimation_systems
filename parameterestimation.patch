diff --git a/src/ParameterEstimation.jl b/src/ParameterEstimation.jl
index 292fd48..1d78cd0 100644
--- a/src/ParameterEstimation.jl
+++ b/src/ParameterEstimation.jl
@@ -23,6 +23,10 @@ using BaryRational
 using ForwardDiff
 using ArbNumerics
 
+const INTERP = Ref("nan")
+const MODEL = Ref("nan")
+const OUTPUT_DIR = Ref("~/parameter_estimation_systems")
+
 #end
 Float = Union{Float64, Float32, Float16, BigFloat}
 include("includes.jl")
diff --git a/src/estimation/fixed_degree.jl b/src/estimation/fixed_degree.jl
index 784ba01..3826453 100644
--- a/src/estimation/fixed_degree.jl
+++ b/src/estimation/fixed_degree.jl
@@ -94,6 +94,7 @@ function estimate_single_interpolator(model::ModelingToolkit.ODESystem,
 	real_tol = 1e-14) where {T <: Float}
 	time_interval = [minimum(data_sample["t"]), maximum(data_sample["t"])]  #TODO(orebas) will this break if key is missing?
 
+	INTERP[] = first(interpolator)
 
 	check_inputs(measured_quantities, data_sample)  #TODO(orebas): I took out checking the degree.  Do we want to check the interpolator otherwise?
 	datasize = length(first(values(data_sample)))
diff --git a/src/estimation/solve.jl b/src/estimation/solve.jl
index d6aabd2..e03cc71 100644
--- a/src/estimation/solve.jl
+++ b/src/estimation/solve.jl
@@ -5,6 +5,11 @@ function solve_via_homotopy(identifiability_result, model; real_tol = 1e-12)
 	state_param_map = merge(Dict(replace(string(x), "(t)" => "") => x
 								 for x in ModelingToolkit.unknowns(model)),
 		Dict(string(x) => x for x in ModelingToolkit.parameters(model)))
+	id = MODEL[]
+	if id != "nan"
+	    io = open("$(OUTPUT_DIR[])/sys_$(id)_$(INTERP[]).txt", "w");
+	    println(io, polynomial_system); close(io);
+	end
 	results = HomotopyContinuation.solve(polynomial_system; show_progress = false)
 	all_solutions = HomotopyContinuation.real_solutions(results)
 	if length(all_solutions) == 0
